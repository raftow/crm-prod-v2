<?php
// ------------------------------------------------------------------------------------
// 6/7/2021 :
// ALTER TABLE `goal_concern` CHANGE `orgunit_id` `orgunit_id` INT(11) NULL; 
// ALTER TABLE `goal_concern` CHANGE `jobsdd_id` `jobsdd_id` INT(11) NULL; 
// ALTER TABLE `goal_concern` CHANGE `atable_mfk` `atable_mfk` VARCHAR(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL DEFAULT ','; 
// 12/2/2023
// ALTER TABLE `goal_concern` CHANGE `application_id` `application_id` INT(11) NOT NULL DEFAULT '0'; 
// 
// ------------------------------------------------------------------------------------

                
$file_dir_name = dirname(__FILE__); 
                
// old include of afw.php

class GoalConcern extends AFWObject{


    public static $DATABASE		= ""; 
    public static $MODULE		    = "bau"; 
    public static $TABLE			= "goal_concern"; 
    
    public static $DB_STRUCTURE = null; 

    public function __construct(){
		parent::__construct("goal_concern","id","bau");
                $this->QEDIT_MODE_NEW_OBJECTS_DEFAULT_NUMBER = 15;
                $this->ORDER_BY_FIELDS = "goal_id, jobrole_id";
                 
                
                $this->UNIQUE_KEY = array('goal_id','jobrole_id');
                
                $this->showQeditErrors = true;
                $this->showRetrieveErrors = true;
                $this->qedit_minibox = false;
                
	}

    public static $MY_ATABLE_ID=13704; 

    // ADMINISTRATIONGOAL - هدف إدارة  
    public static $GOAL_TYPE_ADMINISTRATION_GOAL = 1; 

    // JOB GOAL - هدف وظيفة  
    public static $GOAL_TYPE_JOB_GOAL = 2; 

    // JOBRESPONSIBILITYGOAL - هدف مسؤولية وظيفية  
    public static $GOAL_TYPE_JOB_RESPONSIBILITY_GOAL = 3; 
                
	
    
    
    
    
        
        public static function loadById($id)
        {
           $obj = new GoalConcern();
           $obj->select_visibilite_horizontale();
           if($obj->load($id))
           {
                return $obj;
           }
           else return null;
        }

        public static function loadByMainIndex($goal_id, $jobrole_id, $create_obj_if_not_found=false)
        {
           $obj = new GoalConcern();
           if(!$goal_id) throw new AfwRuntimeException("loadByMainIndex : goal_id is mandatory field");
           if(!$jobrole_id) throw new AfwRuntimeException("loadByMainIndex : jobrole_id is mandatory field");
 
           $obj->select("goal_id",$goal_id);
           $obj->select("jobrole_id",$jobrole_id);
 
           if($obj->load())
           {
                if($create_obj_if_not_found) $obj->activate();
                return $obj;
           }
           elseif($create_obj_if_not_found)
           {
                $obj->set("goal_id",$goal_id);
                $obj->set("jobrole_id",$jobrole_id);
 
                $obj->insert();
                $obj->is_new = true;
                return $obj;
           }
           else return null;
 
        }

        public static function loadUniqueForGoal($goal_id)
        {
            $obj = new GoalConcern();
            if(!$goal_id) throw new AfwRuntimeException("loadFirstForGoal : goal_id is mandatory field");
            
            
    
            $obj->select("goal_id",$goal_id);
            if($obj->count()!=1) return null;
            
            $obj->select("goal_id",$goal_id);
            if($obj->load())
            {
                return $obj;
            }
            else return null;
 
        }


        public static function getJobRoleGoalListUsingTable($jobrole_id,$atable_id)
        {
            $obj = new GoalConcern();
            if(!$atable_id) $obj->_error("getJobRoleGoalListUsingTable : atable_id is mandatory field");
            
            if($jobrole_id) $obj->select("jobrole_id",$jobrole_id);
            $obj->where("avail = 'Y' and atable_mfk like '%,$atable_id,%'");

            $goalConcernList = $obj->loadMany();
            
            $goalList = array();
            
            foreach($goalConcernList as $goalConcernItem)
            {
                 $goalItem = $goalConcernItem->hetGoal();
                 
                 if($goalItem)  $goalList[$goalItem->getId()] = $goalItem;
            }
           
            return $goalList;
        }
        
        public static function resetAutoGeneratedConcernsOfGoal($goal_id)
        {
            $obj = new GoalConcern();
            if(!$goal_id) $obj->_error("resetAutoGeneratedConcernsOfGoal : goal_id is mandatory field");
            
            $obj->select("goal_id",$goal_id);
            $obj->where("avail = 'Y' and (comment = 'AUTO-GENERATED' or comment = '' or comment is null)");

            return $obj->logicDelete($commit=true,$only_me=false);
        }
        
        
        
        /*
        public static function getOrgunitGoalListUsingTable($orgunit_id,$atable_id)
        {
            $obj = new GoalConcern();
            if(!$atable_id) $obj->_error("getJobRoleGoalListUsingTable : atable_id is mandatory field");
            
            if($orgunit_id) $obj->select("orgunit_id",$orgunit_id);
            $obj->where("avail = 'Y' and atable_mfk like '%,$atable_id,%'");

            $goalConcernList = $obj->loadMany();
            
            $goalList = array();
            
            foreach($goalConcernList as $goalConcernItem)
            {
                 $goalItem = $goalConcernItem->hetGoal();
                 
                 if($goalItem)  $goalList[$goalItem->getId()] = $goalItem;
            }
           
            return $goalList;
        } */
        
        
                
        
        
        


        public function getDisplay($lang="ar")
        {
               $data = array();
               $link = array();
 
 
               list($data[0],$link[0]) = $this->displayAttribute("goal_id",false, $lang);
               list($data[1],$link[1]) = $this->displayAttribute("jobrole_id",false, $lang);
 
 
               return "مسؤولية " . $data[1]." تسعى في تحقيق الهدف : ".$data[0];
        }
        
        
        

        
        protected function getOtherLinksArray($mode, $genereLog = false, $step="all")      
        {
             global $me, $objme, $lang;
             $otherLinksArray = $this->getOtherLinksArrayStandard($mode, false, $step);
             $my_id = $this->getId();
             $displ = $this->getDisplay($lang);
             
             
             
             return $otherLinksArray;
        }
        
        protected function getPublicMethods()
        {
            
            $pbms = array();
            
            $color = "green";
            $title_ar = "xxxxxxxxxxxxxxxxxxxx"; 
            //$pbms["xc123B"] = array("METHOD"=>"methodName","COLOR"=>$color, "LABEL_AR"=>$title_ar, "ADMIN-ONLY"=>true, "BF-ID"=>"");
            
            
            
            return $pbms;
        }
        
        
        public function beforeDelete($id,$id_replace) 
        {
            
            
            if($id)
            {   
               if($id_replace==0)
               {
                   $server_db_prefix = AfwSession::config("db_prefix","default_db_"); // FK part of me - not deletable 

                        
                   $server_db_prefix = AfwSession::config("db_prefix","default_db_"); // FK part of me - deletable 

                   
                   // FK not part of me - replaceable 

                        
                   
                   // MFK

               }
               else
               {
                        $server_db_prefix = AfwSession::config("db_prefix","default_db_"); // FK on me 

                        
                        // MFK

                   
               } 
               return true;
            }    
	}
        
        public function attributeIsApplicable($attribute)
        {
              $goal = $this->hetGoal();
              if($attribute=="atable_mfk") return ($goal and (!$goal->isTodoGoal()));
              
              return true;
        }
        
        
        public function getRAMObjectData()
        {
                  $category_id = 14;

                  $file_dir_name = dirname(__FILE__); 
                  require_once("$file_dir_name/../bau/r_a_m_object_type.php");
                  
                  $goal = $this->hetGoal();
                  
                  if(!$goal)
                  {
                      throw new AfwRuntimeException("getRAMObjectData error goal not defined for this goal concern");
                  }
                  
                  $goalTypeObj = $goal->getType();
                  if(!$goalTypeObj)
                  {
                      throw new AfwRuntimeException("getRAMObjectData error goalType not defined for this goal $goal");
                  }
                  
                  $lookup_code = $goalTypeObj->getVal("lookup_code");
                  
                  $lookup_code = str_replace('Goal', 'Concern', $lookup_code);
                  
                  
                  
                  $typeObj = RAMObjectType::loadByMainIndex($lookup_code);
                  if(!$typeObj)
                  {
                      throw new AfwRuntimeException("getRAMObjectData error goalType lookup code [$lookup_code] not found as RAMObjectType");
                  }
                  $type_id = $typeObj->getId();
                  
                  $code = "goalConcern-".$this->getUniqueCode(); 
                  
                  $name_ar = $this->getShortDisplay("ar");
                  $name_en = $this->getShortDisplay("en");
                  $specification = "";
                  
                  $childs = array();
                    
                  
                  return array($category_id, $type_id, $code, $name_ar, $name_en, $specification, $childs);
        
        }
        
        public function list_of_operation_men() { 
            $list_of_items = array(); 
            $list_of_items[1] = "إنشاء / تعديل";  //     code : EDIT  / UPDATE
            $list_of_items[2] = "بحث / إظهار";  //     code : DISPLAY / QSERACH
            $list_of_items[3] = "مسح";  //     code : DELETE 
            $list_of_items[4] = "إحصائيات";  //     code : STATS 
            $list_of_items[5] = "تعديل سريع";  //     code : QEDIT 
           return  $list_of_items;
        }

        public function shouldBeCalculatedField($attribute){
            if($attribute=="goal_atable_mfk") return true;
            if($attribute=="goal_system_id") return true;
            if($attribute=="goal_domain_id") return true;
            return false;
        }

        public function myShortNameToAttributeName($attribute){
            if($attribute=="goal") return "goal_id";
            if($attribute=="application") return "application_id";
            if($attribute=="jobrole") return "jobrole_id";
            if($attribute=="atables") return "atable_mfk";
            if($attribute=="operations") return "operation_men";
            return $attribute;
        }
             
}
?>